return(a*0.3048 + b*0.0254)
}
a <- 5
b <- 2
height_in_meters <- imperial_to_metric()
height_in_meters
round(3.1415)
factorial(12)
mean(1:17)
# Create a vector with numbers from 1 to 6
die <- 1:6
die
sample(x = die, size = 1)
sample(die, size = 1)
sample(die, 1)
Part_A <-(27*(38-17))
Part_A
Part_B <- log (14^(7))
Part_B
Part_C <- sqrt(436/12)
Part_C
a <- seq(5, 160, by = 5)
a
b <- seq(87, 56, by = -1)
b
d <- (a*b)
d
answer <- d[19:21]
answer
answer_2 <- d[c(d <= 2000)]
answer_2
answer_3 <- d[c(d >= 6000)]
answer_3
nouns <- c("apple", "flower", "insect", "lettuce", "knife", "dog", "cloud", "person", "cabinet", "flower" )
nouns_length <- length(nouns)
nouns_length
new_nouns <- nouns[c(nouns = 1:4)]
new_nouns
nouns2 <- nouns[c(nouns = 3:10)]
nouns2
results <- length(nouns[c(nouns = 1, 3:6, 10)])
results
backwards <- rev(nouns)
backwards
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE, finite = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0, 5, 10))
library(tidyverse)
mov_url <- "https://raw.githubusercontent.com/reisanar/datasets/master/HollywoodMovies.csv"
Hollywood <- read_csv(mov_url)
library(tidyverse)
library(tidyverse)
mov_url <- "https://raw.githubusercontent.com/reisanar/datasets/master/HollywoodMovies.csv"
Hollywood <- read_csv(mov_url)
glimpse(Hollywood)
head(Hollywood)
filter(Hollywood, Universal)
filter(Hollywood, LeadStudio == Universal)
filter(Hollywood, LeadStudio == "Universal")
filter(Hollywood, LeadStudio == "Universal", Genre == "Action")
disney_movies <- filter(Hollywood, LeadStudio == "Disney")
disney_movies <- filter(Hollywood, LeadStudio == "Disney")
disney_movies
disney_2010 <- filter(Hollywood, Year == 2010)
disney_2010 <- filter(Hollywood, Year == 2010)
disney_2010
Hollywood %>%
filter(Profitability >= 1500)
disney_2010 <- filter(disney_movies, Year == 2010)
disney_2010
disney_movies %>%
filter(Profitability >= 1500)
mutate(Hollywood, Score = (RottenTomates + AudienceScore) / 2)
mutate(Hollywood, Score = (RottenTomatoes + AudienceScore) / 2)
Hollywood <- mutate(Hollywood, Score = (RottenTomatoes + AudienceScore) / 2)
View(Hollywood)
arrange(Hollywood, Budget)
my_movies <- select(Hollywood, "Movie", "Studio", "Genre", "Budget", "Profitability", "Year")
my_movies <- select(Hollywood, Movie, Studio, Genre, Budget, Profitability, Year)
my_movies <- select(Hollywood, Movie, LeadStudio, Genre, Budget, Profitability, Year)
# print the new data frame
my_movies
arrange(my_movies, Budget)
summarise(Hollywood, mean(Budget))
summarise(Hollywood,
ave_budget = mean(Budget, na.rm = TRUE))
Hollywood %>%
filter(Budget == max(Budget, na.rm = TRUE))
Hollywood %>%
filter(Budget == min(Budget, na.rm = TRUE))
Hollywood %>%
group_by(LeadStudio) %>%
summarise(AveBudget = mean(Budget, na.rm = TRUE))
Hollywood %>%
group_by(LeadStudio) %>%
summarise(desc(AveBudget = mean(Budget, na.rm = TRUE)))
Hollywood %>%
group_by(LeadStudio) %>%
summarise(AveBudget = mean(Budget, na.rm = TRUE)) %>%
arrange(-AveBudget)
rename(Hollywood, "Studio" = "LeadStudio")
library(tidyverse)
mov_url <- "https://raw.githubusercontent.com/reisanar/datasets/master/HollywoodMovies.csv"
Hollywood <- read_csv(mov_url)
glimpse(Hollywood)
head(Hollywood)
filter(Hollywood, LeadStudio == "Universal")
filter(Hollywood, LeadStudio == "Universal", Genre == "Action")
disney_movies <- filter(Hollywood, LeadStudio == "Disney")
disney_movies
disney_2010 <- filter(disney_movies, Year == 2010)
disney_2010
disney_movies %>%
filter(Profitability >= 1500)
Hollywood <- mutate(Hollywood, Score = (RottenTomatoes + AudienceScore) / 2)
my_movies <- select(Hollywood, Movie, LeadStudio, Genre, Budget, Profitability, Year)
# print the new data frame
my_movies
arrange(my_movies, Budget)
summarise(Hollywood,
ave_budget = mean(Budget, na.rm = TRUE))
Hollywood %>%
filter(Budget == max(Budget, na.rm = TRUE))
Hollywood %>%
filter(Budget == min(Budget, na.rm = TRUE))
Hollywood %>%
group_by(LeadStudio) %>%
summarise(AveBudget = mean(Budget, na.rm = TRUE))
Hollywood %>%
group_by(LeadStudio) %>%
summarise(AveBudget = mean(Budget, na.rm = TRUE)) %>%
arrange(-AveBudget)
rename(Hollywood, "Studio" = "LeadStudio")
library(tidyverse)
# read data
presidentialElections <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/presidentialElections.csv")
library(tidyverse)
# read data
presidentialElections <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/presidentialElections.csv")
votes <- presidentialElections %>%
select(year, demVote)
votes <- presidentialElections %>%
select(year, demVote)
votes
presidentialElections %>%
select(state:year)
presidentialElections %>%
select(-south)
votes_2008 <- presidentialElections %>%
filter(year == 2008)
votes_2008 <- presidentialElections %>%
filter(year == 2008)
votes_2008
votes_colorado_2008 <- presidentialElections %>%
filter(year == 2008, state == "Colorado")
votes_colorado_2008
presidentialElections <- presidentialElections %>%
mutate(
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
presidentialElections <- presidentialElections %>%
mutate(
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
presidentialElections
presidentialElections <- presidentialElections %>%
arrange(-year, -demVote)
presidentialElections <- presidentialElections %>%
arrange(-year, -demVote)
presidentialElections
View(presidentialElections)
average_votes <- presidentialElections %>%
summarise(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
average_votes <- presidentialElections %>%
summarise(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
average_votes
presidentialElections %>%
filter(year == 2008, max(demVote))
presidentialElections %>%
filter(year = 2008, max(demVote))
presidentialElections %>%
filter(year == 2008) %>%
filter(demVote == max(demVote)) %>%
select(state)
presidentialElections %>%
filter(year == 2008) %>%
presidentialElections %>%
filter(year == 2008)
presidentialElections %>%
group_by(state) %>%
summarise(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
library(tidyverse)
# read data
presidentialElections <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/presidentialElections.csv")
votes <- presidentialElections %>%
select(year, demVote)
votes
presidentialElections %>%
select(state:year)
presidentialElections %>%
select(-south)
votes_2008 <- presidentialElections %>%
filter(year == 2008)
votes_2008
votes_colorado_2008 <- presidentialElections %>%
filter(year == 2008, state == "Colorado")
votes_colorado_2008
presidentialElections <- presidentialElections %>%
mutate(
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
presidentialElections
presidentialElections <- presidentialElections %>%
arrange(-year, -demVote)
presidentialElections
average_votes <- presidentialElections %>%
summarise(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
average_votes
presidentialElections %>%
filter(year == 2008)
presidentialElections %>%
filter(year == 2008) %>%
filter(demVote == max(demVote)) %>%
select(state)
presidentialElections %>%
group_by(state) %>%
summarise(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
load("~/NetflixShows_FP/.RData")
library(tidyverse)
myurl  <- "https://raw.githubusercontent.com/reisanar/datasets/master/netflixShows.csv"
mydata <- read_csv(myurl)
View(mydata)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(scales)
library(lubridate)
#read the processed Data
netflixshows  <- read.csv('netflix_titles.csv')
# Delete the description and Show ID Columns
netflixshows <- netflixshows%>%
select(-description, -show_id, - cast)
#Because countries are sometimes grouped together, separating them is required.
sep_country_movie <- netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
#Due to the size of the dataset, we had to filter out countries that had under 100 Movie entries
filter(n()> 100 & type == "Movie")%>%
summarize(country)
#Because countries are sometimes grouped together, separating them is required.
#Due to the size of the dataset, we had to filter out countries that had under 80 Movie entries.
netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
filter(n()> 80 & type == "Movie" & country != "")%>%
ggplot()+
geom_bar(mapping = aes(
y = country,
color = country),
na.rm = T)+
labs(
title = "Netflix Movie Content by Country",
subtitle = "Includes Countries where count is more than 80",
y = "Country Name",
x = "Number of Movies"
)
netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
filter(n()> 80 & type == "TV Show" & country != "")%>%
ggplot()+
geom_bar(mapping = aes(
y = country,
color = country),
na.rm = T)+
labs(
title = "Netflix TV Show Content by Country",
subtitle = "Includes Countries where count is more than 80",
y = "Country Name",
x = "Number of TV Shows",
)
netflixshows%>%
group_by(release_year)%>%
filter(release_year != "" |  !is.na(release_year))%>%
filter(type == "Movie")%>%
ggplot()+
geom_bar(mapping = aes(
x = release_year))+
labs(
title = "Netflix Movie content by Release Year",
x = "Year",
y = "Count"
)
netflixshows%>%
group_by(release_year)%>%
filter(release_year != "" |  !is.na(release_year))%>%
filter(type == "TV Show")%>%
ggplot()+
geom_bar(mapping = aes(
x = release_year))+
labs(
title = "Netflix Movie content by Release Year",
x = "Year",
y = "Count"
)
netflixshows%>%
group_by(rating)%>%
filter(rating != "" | !is.na(rating))%>%
ggplot()+
geom_bar(mapping = aes(
y = rating,
color = rating))+
labs(
title = "Netflix Content by Age Rating",
x = "Count",
y = "Age Rating"
)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(scales)
library(lubridate)
#read the processed Data
netflixshows  <- read.csv('netflix_titles.csv')
# Delete the description and Show ID Columns
netflixshows <- netflixshows%>%
select(-description, -show_id, - cast)
#Because countries are sometimes grouped together, separating them is required.
sep_country_movie <- netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
#Due to the size of the dataset, we had to filter out countries that had under 100 Movie entries
filter(n()> 100 & type == "Movie")%>%
summarize(country)
#Because countries are sometimes grouped together, separating them is required.
#Due to the size of the dataset, we had to filter out countries that had under 80 Movie entries.
netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
filter(n()> 80 & type == "Movie" & country != "")%>%
ggplot()+
geom_bar(mapping = aes(
y = country,
color = country),
na.rm = T)+
labs(
title = "Netflix Movie Content by Country",
subtitle = "Includes Countries where count is more than 80",
y = "Country Name",
x = "Number of Movies"
)
netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
filter(n()> 80 & type == "TV Show" & country != "")%>%
ggplot()+
geom_bar(mapping = aes(
y = country,
color = country),
na.rm = T)+
labs(
title = "Netflix TV Show Content by Country",
subtitle = "Includes Countries where count is more than 80",
y = "Country Name",
x = "Number of TV Shows",
)
netflixshows%>%
group_by(release_year)%>%
filter(release_year != "" |  !is.na(release_year))%>%
filter(type == "Movie")%>%
ggplot()+
geom_bar(mapping = aes(
x = release_year))+
labs(
title = "Netflix Movie content by Release Year",
x = "Year",
y = "Count"
)
netflixshows%>%
group_by(release_year)%>%
filter(release_year != "" |  !is.na(release_year))%>%
filter(type == "TV Show")%>%
ggplot()+
geom_bar(mapping = aes(
x = release_year))+
labs(
title = "Netflix Movie content by Release Year",
x = "Year",
y = "Count"
)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(scales)
library(lubridate)
install.packages(scales)
install.packages("ggplot2")
install.packages("ggplot2")
installed.packages("scales")
installed.packages("scales")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(scales)
library(lubridate)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(scales)
library(lubridate)
#read the processed Data
netflixshows  <- read.csv('netflix_titles.csv')
# Delete the description and Show ID Columns
netflixshows <- netflixshows%>%
select(-description, -show_id, - cast)
#Because countries are sometimes grouped together, separating them is required.
sep_country_movie <- netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
#Due to the size of the dataset, we had to filter out countries that had under 100 Movie entries
filter(n()> 100 & type == "Movie")%>%
summarize(country)
#Because countries are sometimes grouped together, separating them is required.
#Due to the size of the dataset, we had to filter out countries that had under 80 Movie entries.
netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
filter(n()> 80 & type == "Movie" & country != "")%>%
ggplot()+
geom_bar(mapping = aes(
y = country,
color = country),
na.rm = T)+
labs(
title = "Netflix Movie Content by Country",
subtitle = "Includes Countries where count is more than 80",
y = "Country Name",
x = "Number of Movies"
)
netflixshows%>%
separate_rows(country, sep = ",")%>%
group_by(country)%>%
filter(n()> 80 & type == "TV Show" & country != "")%>%
ggplot()+
geom_bar(mapping = aes(
y = country,
color = country),
na.rm = T)+
labs(
title = "Netflix TV Show Content by Country",
subtitle = "Includes Countries where count is more than 80",
y = "Country Name",
x = "Number of TV Shows",
)
netflixshows%>%
group_by(release_year)%>%
filter(release_year != "" |  !is.na(release_year))%>%
filter(type == "Movie")%>%
ggplot()+
geom_bar(mapping = aes(
x = release_year))+
labs(
title = "Netflix Movie content by Release Year",
x = "Year",
y = "Count"
)
netflixshows%>%
group_by(release_year)%>%
filter(release_year != "" |  !is.na(release_year))%>%
filter(type == "TV Show")%>%
ggplot()+
geom_bar(mapping = aes(
x = release_year))+
labs(
title = "Netflix Movie content by Release Year",
x = "Year",
y = "Count"
)
netflixshows%>%
group_by(rating)%>%
filter(rating != "" | !is.na(rating))%>%
ggplot()+
geom_bar(mapping = aes(
y = rating,
color = rating))+
labs(
title = "Netflix Content by Age Rating",
x = "Count",
y = "Age Rating"
)
View(mydata)
View(netflixshows)
